.{
    .name = "iw-zig",
    // This is a [Semantic Version](https://semver.org/).
    // In a future version of Zig it will be used for package deduplication.
    .version = "6.7.0",

    // This field is optional.
    // This is currently advisory only; Zig does not yet do anything
    // with this value.
    //.minimum_zig_version = "0.11.0",

    // This field is optional.
    // Each dependency must either provide a `url` and `hash`, or a `path`.
    // `zig build --fetch` can be used to fetch all dependencies of a package, recursively.
    // Once all dependencies are fetched, `zig build` no longer requires
    // internet connectivity.
    .dependencies = .{
        .iw = .{
            .url = "git+https://github.com/binarycraft007/iw#52ae9650b3a09306608cc266bd2ca5b4d789d453",
            .hash = "1220c5442f34cb8f4fe3645bb45c4f611c47c485e967db85ed4b794c4622fe5269c5",
        },
        .libnl_tiny = .{
            .url = "git+https://github.com/binarycraft007/libnl-tiny#e6d34d32b9f329d0649708b8b31f3c20d22e1c12",
            .hash = "1220d8675befe16a3cac6c50c902d0fd70eb5b3e61bc5a6ed3d1506964a7a8be7102",
        },
    },
    .paths = .{
        // This makes *all* files, recursively, included in this package. It is generally
        // better to explicitly list the files and directories instead, to insure that
        // fetching from tarballs, file system paths, and version control all result
        // in the same contents hash.
        "",
        // For example...
        //"build.zig",
        //"build.zig.zon",
        //"src",
        //"LICENSE",
        //"README.md",
    },
}
